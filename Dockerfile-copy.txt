FROM python:3.12-alpine

ARG OPENCV_VERSION=4.8.1

WORKDIR /opt/build

RUN set -ex \
    && echo "@edge http://dl-cdn.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories \
    && echo "@community http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories \
    && echo "@testing http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories \
    && apk add -q --update --no-cache \
        build-base cmake \
        wget unzip \
        hdf5 hdf5-dev \
        protobuf protobuf-dev \
        openblas openblas-dev@community \
        libjpeg libjpeg-turbo-dev \
        libpng libpng-dev \
        tiff tiff-dev \
        libwebp libwebp-dev \
        openjpeg openjpeg-dev openjpeg-tools \
        libtbb@testing libtbb-dev@testing \
        eigen eigen-dev \
        tesseract-ocr tesseract-ocr-data-por tesseract-ocr-dev \
        py3-pip python3-dev py3-numpy \
        linux-headers \
    && pip install -q numpy \
    && wget -q https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip -O opencv.zip \
    && wget -q https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip -O opencv_contrib.zip \
    && unzip -qq opencv.zip -d /opt && rm -rf opencv.zip \
    && unzip -qq opencv_contrib.zip -d /opt && rm -rf opencv_contrib.zip \
    && cmake \
        -D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib-${OPENCV_VERSION}/modules \
        -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
        -D OPENCV_ENABLE_NONFREE=ON \
        -D WITH_JPEG=ON \
        -D WITH_PNG=ON \
        -D WITH_TIFF=ON \
        -D WITH_WEBP=ON \
        -D WITH_JASPER=ON \
        -D WITH_EIGEN=ON \
        -D WITH_TBB=ON \
        -D WITH_LAPACK=ON \
        -D WITH_PROTOBUF=ON \
        -D WITH_V4L=OFF \
        -D WITH_GSTREAMER=OFF \
        -D WITH_GTK=OFF \
        -D WITH_QT=OFF \
        -D WITH_CUDA=OFF \
        -D WITH_VTK=OFF \
        -D WITH_OPENEXR=OFF \
        -D WITH_FFMPEG=OFF \
        -D WITH_OPENCL=OFF \
        -D WITH_OPENNI=OFF \
        -D WITH_XINE=OFF \
        -D WITH_GDAL=OFF \
        -D WITH_IPP=OFF \
        -D BUILD_OPENCV_PYTHON3=ON \
        -D BUILD_OPENCV_PYTHON2=OFF \
        -D BUILD_OPENCV_JAVA=OFF \
        -D BUILD_TESTS=OFF \
        -D BUILD_IPP_IW=OFF \
        -D BUILD_PERF_TESTS=OFF \
        -D BUILD_EXAMPLES=OFF \
        -D BUILD_ANDROID_EXAMPLES=OFF \
        -D BUILD_DOCS=OFF \
        -D BUILD_ITT=OFF \
        -D INSTALL_PYTHON_EXAMPLES=OFF \
        -D INSTALL_C_EXAMPLES=OFF \
        -D INSTALL_TESTS=OFF \
        -D PYTHON3_EXECUTABLE=/usr/local/bin/python \
        -D PYTHON3_INCLUDE_DIR=/usr/local/include/python3.12/ \
        -D PYTHON3_LIBRARY=/usr/local/lib/libpython3.so \
        -D PYTHON_LIBRARY=/usr/local/lib/libpython3.so \
        -D PYTHON3_PACKAGES_PATH=/usr/local/lib/python3.12/site-packages/ \
        -D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.12/site-packages/numpy/core/include/numpy \
        /opt/opencv-${OPENCV_VERSION} \
    && make -j$(nproc) \
    && make install \
    && rm -rf /opt/build/* \
    && rm -rf /opt/opencv-${OPENCV_VERSION} \
    && rm -rf /opt/opencv_contrib-${OPENCV_VERSION}
    # && apk del -q --no-cache \
    #     build-base cmake \
    #     hdf5-dev \
    #     protobuf-dev \
    #     openblas-dev \
    #     libjpeg-turbo-dev \
    #     libpng-dev \
    #     tiff-dev \
    #     libwebp-dev \
    #     openjpeg-dev \
    #     libtbb-dev \
    #     eigen-dev \
    #     tesseract-ocr-dev \
    #     py3-numpy-dev \
    #     python3-dev \
    #     linux-headers

ADD . /app
RUN apk add bash
WORKDIR /app
RUN apk update
RUN apk add --no-cache \
    ffmpeg \
    libsm-dev \
    libxrender \
    libxext-dev \
    ghostscript \
    dos2unix
COPY requirements.txt /app/
RUN pip install setuptools wheel
RUN pip3 install awscli
RUN pip install --no-cache-dir -r requirements.txt

COPY . /app

EXPOSE 3000

COPY entrypoint.sh /app/entrypoint.sh

RUN dos2unix /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh

ENTRYPOINT ["/bin/bash", "-c", "/app/entrypoint.sh"]

###############################################################################

# FROM Ubuntu:latest
# WORKDIR /app


# RUN python -m venv venv
# ENV PATH="/app/venv/bin:$PATH"

# RUN apt-get update && \
#     apt-get install -y --fix-missing \
#     ffmpeg \
#     libsm6 \
#     libxext6 \
#     ghostscript \
#     awscli \
#     dos2unix

# COPY requirements.txt /app/
# RUN pip install --upgrade pip && \
#     pip install --upgrade setuptools wheel && \
#     pip install --no-cache-dir -r requirements.txt

# RUN apt-get remove libaom3:amd64 -y

# COPY . /app

# EXPOSE 3232

# COPY entrypoint.sh /app/entrypoint.sh
# RUN dos2unix /app/entrypoint.sh && \
#     chmod +x /app/entrypoint.sh

# ENTRYPOINT ["/bin/bash", "-c", "/app/entrypoint.sh"]










# FROM python:3.12-alpine3.19
# ADD . /app
# RUN apk add bash
# WORKDIR /app

# RUN apk add --no-cache \
#     gcc \
#     g++ \
#     cmake \
#     libc-dev \
#     linux-headers \
#     musl-dev \
#     libffi-dev \
#     openssl-dev \
#     zlib-dev \
#     python3-dev \
#     git

# RUN apk add --no-cache \
#     ffmpeg \
#     libsm-dev \
#     libxrender \
#     libxext-dev \
#     ghostscript \
#     aws-cli \
#     dos2unix

# RUN python -m venv venv
# ENV PATH="/app/venv/bin:$PATH"

# RUN pip install --upgrade pip

# RUN pip install setuptools wheel

# RUN pip install numpy

# # RUN pip install opencv-python

# RUN python3 -m pip install --no-cache-dir opencv-contrib-python-headless

# # RUN apk add --no-cache py3-opencv

# # RUN git clone https://github.com/opencv/opencv.git

# # RUN mkdir build

# # # Change the working directory to the build directory
# # WORKDIR /app/build

# # RUN cmake ..

# # RUN make && make install

# # WORKDIR /app

# COPY requirements.txt /app/

# RUN pip install --no-cache-dir -r requirements.txt

# # RUN pip install --upgrade pip && \
# #     pip install setuptools wheel && \
# #     pip install --no-cache-dir -r requirements.txt

# # RUN python3.12 -m ensurepip --upgrade \
# #     && python3.12 -m pip install setuptools \
# #     && python3.12 -m pip install wheel \
# #     && python3.12 -m pip install --no-cache-dir -r requirements.txt
# #     # && pip install --upgrade pip setuptools wheel \
# #     # && pip install --no-cache-dir -r requirements.txt

# # RUN apk del libaom3:amd64 -y

# COPY . /app

# EXPOSE 3000

# COPY entrypoint.sh /app/entrypoint.sh

# RUN dos2unix /app/entrypoint.sh && \
#     chmod +x /app/entrypoint.sh

# ENTRYPOINT ["/bin/bash", "-c", "/app/entrypoint.sh"]



# FROM python:3.10
# WORKDIR /app
# RUN python -m venv venv
# RUN . venv/bin/activate
# RUN apt-get update && apt-get install ffmpeg libsm6 libxext6 ghostscript -y
# RUN apt-get install -y awscli dos2unix
# COPY requirements.txt /app/
# RUN pip install --no-cache-dir -r requirements.txt
# COPY . /app
# #RUN aws s3 cp s3://duploservices-dev-configs-new-167414264568/document-processor/GMU_admin.json /app/assets
# EXPOSE 3232
# #CMD ["python", "main.py"]

# COPY entrypoint.sh /app/entrypoint.sh
# RUN dos2unix /app/entrypoint.sh
# RUN chmod +x /app/entrypoint.sh
# ENTRYPOINT ["/bin/bash", "-c", "/app/entrypoint.sh"]

# FROM python:3.12.1
# WORKDIR /app
# RUN python -m venv venv
# ENV PATH="/app/venv/bin:$PATH"

# RUN apt-get update && \
#     apt-get install -y --fix-missing \
#     ffmpeg \
#     libsm6 \
#     libxext6 \
#     ghostscript \
#     awscli \
#     dos2unix

# COPY requirements.txt /app/
# RUN pip install --upgrade pip && \
#     pip install --upgrade setuptools wheel && \
#     pip install --no-cache-dir -r requirements.txt

# RUN apt-get remove libaom3:amd64 -y

# COPY . /app

# EXPOSE 3232

# COPY entrypoint.sh /app/entrypoint.sh
# RUN dos2unix /app/entrypoint.sh && \
#     chmod +x /app/entrypoint.sh

# ENTRYPOINT ["/bin/bash", "-c", "/app/entrypoint.sh"]

# FROM alpine:3.19

# ADD . /app
# RUN apk add bash

# ARG PYTHON_VERSION=3.12.2

# # install build dependencies and needed tools
# RUN apk add --no-cache \
#     wget \
#     gcc \
#     make \
#     zlib-dev \
#     libffi-dev \
#     openssl-dev \
#     musl-dev

# # download and extract python sources
# RUN cd /opt \
#     && wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz \
#     && tar xzf Python-${PYTHON_VERSION}.tgz

# # build python and remove left-over sources
# RUN cd /opt/Python-${PYTHON_VERSION} \
#     && ./configure --prefix=/usr --enable-optimizations --with-ensurepip=install \
#     && make install \
#     && rm /opt/Python-${PYTHON_VERSION}.tgz /opt/Python-${PYTHON_VERSION} -rf

# RUN apk add --update alpine-sdk

# RUN apk add --no-cache\
#     ffmpeg \
#     libsm6 \
#     libxext6 \
#     ghostscript \
#     aws-cli \
#     py3-pip

# COPY requirements.txt /app/
# RUN pip install --upgrade pip && \
#     pip install --upgrade setuptools wheel && \
#     pip install --no-cache-dir -r requirements.txt

# RUN apk del libaom3:amd64 -y

# COPY . /app

# EXPOSE 3000

# COPY entrypoint.sh /app/entrypoint.sh
# RUN dos2unix /app/entrypoint.sh && \
#     chmod +x /app/entrypoint.sh

# ENTRYPOINT ["/bin/bash", "-c", "/app/entrypoint.sh"]